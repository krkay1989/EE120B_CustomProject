
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000a42  00000ad6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800118  00800118  00000aee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000146a  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ff  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0c  00000000  00000000  00002a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  00003684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009aa  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	64 c1       	rjmp	.+712    	; 0x2fe <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f8 d2       	rcall	.+1520   	; 0x6b4 <main>
  c4:	bc c4       	rjmp	.+2424   	; 0xa3e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
}
void TimerOff() {
	TCCR1B = 0x00;
}
void TimerISR() {
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <dht_GetTemp>:
 178:	cf 92       	push	r12
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <dht_GetTemp+0x12>
 18a:	00 d0       	rcall	.+0      	; 0x18c <dht_GetTemp+0x14>
 18c:	1f 92       	push	r1
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	6c 01       	movw	r12, r24
 194:	de 01       	movw	r26, r28
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	95 e0       	ldi	r25, 0x05	; 5
 19a:	fd 01       	movw	r30, r26
 19c:	11 92       	st	Z+, r1
 19e:	9a 95       	dec	r25
 1a0:	e9 f7       	brne	.-6      	; 0x19c <dht_GetTemp+0x24>
 1a2:	20 9a       	sbi	0x04, 0	; 4
 1a4:	28 9a       	sbi	0x05, 0	; 5
 1a6:	ff ef       	ldi	r31, 0xFF	; 255
 1a8:	20 e7       	ldi	r18, 0x70	; 112
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	f1 50       	subi	r31, 0x01	; 1
 1ae:	20 40       	sbci	r18, 0x00	; 0
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <dht_GetTemp+0x34>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <dht_GetTemp+0x3e>
 1b6:	00 00       	nop
 1b8:	28 98       	cbi	0x05, 0	; 5
 1ba:	af e9       	ldi	r26, 0x9F	; 159
 1bc:	bc e8       	ldi	r27, 0x8C	; 140
 1be:	11 97       	sbiw	r26, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <dht_GetTemp+0x46>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <dht_GetTemp+0x4c>
 1c4:	00 00       	nop
 1c6:	28 9a       	sbi	0x05, 0	; 5
 1c8:	20 98       	cbi	0x04, 0	; 4
 1ca:	ba e6       	ldi	r27, 0x6A	; 106
 1cc:	ba 95       	dec	r27
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <dht_GetTemp+0x54>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <dht_GetTemp+0x5a>
 1d2:	18 99       	sbic	0x03, 0	; 3
 1d4:	59 c0       	rjmp	.+178    	; 0x288 <dht_GetTemp+0x110>
 1d6:	e5 ed       	ldi	r30, 0xD5	; 213
 1d8:	ea 95       	dec	r30
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <dht_GetTemp+0x60>
 1dc:	00 00       	nop
 1de:	18 9b       	sbis	0x03, 0	; 3
 1e0:	55 c0       	rjmp	.+170    	; 0x28c <dht_GetTemp+0x114>
 1e2:	f5 ed       	ldi	r31, 0xD5	; 213
 1e4:	fa 95       	dec	r31
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <dht_GetTemp+0x6c>
 1e8:	00 00       	nop
 1ea:	8e 01       	movw	r16, r28
 1ec:	0f 5f       	subi	r16, 0xFF	; 255
 1ee:	1f 4f       	sbci	r17, 0xFF	; 255
 1f0:	7e 01       	movw	r14, r28
 1f2:	26 e0       	ldi	r18, 0x06	; 6
 1f4:	e2 0e       	add	r14, r18
 1f6:	f1 1c       	adc	r15, r1
 1f8:	e1 e0       	ldi	r30, 0x01	; 1
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	26 c0       	rjmp	.+76     	; 0x24a <dht_GetTemp+0xd2>
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
 202:	19 f4       	brne	.+6      	; 0x20a <dht_GetTemp+0x92>
 204:	45 c0       	rjmp	.+138    	; 0x290 <dht_GetTemp+0x118>
 206:	29 ec       	ldi	r18, 0xC9	; 201
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	18 9b       	sbis	0x03, 0	; 3
 20c:	f8 cf       	rjmp	.-16     	; 0x1fe <dht_GetTemp+0x86>
 20e:	80 e5       	ldi	r24, 0x50	; 80
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <dht_GetTemp+0x98>
 214:	18 9b       	sbis	0x03, 0	; 3
 216:	08 c0       	rjmp	.+16     	; 0x228 <dht_GetTemp+0xb0>
 218:	9f 01       	movw	r18, r30
 21a:	04 2e       	mov	r0, r20
 21c:	02 c0       	rjmp	.+4      	; 0x222 <dht_GetTemp+0xaa>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <dht_GetTemp+0xa6>
 226:	92 2b       	or	r25, r18
 228:	29 ec       	ldi	r18, 0xC9	; 201
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	03 c0       	rjmp	.+6      	; 0x234 <dht_GetTemp+0xbc>
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	31 09       	sbc	r19, r1
 232:	81 f1       	breq	.+96     	; 0x294 <dht_GetTemp+0x11c>
 234:	18 99       	sbic	0x03, 0	; 3
 236:	fb cf       	rjmp	.-10     	; 0x22e <dht_GetTemp+0xb6>
 238:	41 50       	subi	r20, 0x01	; 1
 23a:	51 09       	sbc	r21, r1
 23c:	20 f7       	brcc	.-56     	; 0x206 <dht_GetTemp+0x8e>
 23e:	d8 01       	movw	r26, r16
 240:	9d 93       	st	X+, r25
 242:	8d 01       	movw	r16, r26
 244:	ea 16       	cp	r14, r26
 246:	fb 06       	cpc	r15, r27
 248:	21 f0       	breq	.+8      	; 0x252 <dht_GetTemp+0xda>
 24a:	47 e0       	ldi	r20, 0x07	; 7
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	da cf       	rjmp	.-76     	; 0x206 <dht_GetTemp+0x8e>
 252:	20 9a       	sbi	0x04, 0	; 4
 254:	28 9a       	sbi	0x05, 0	; 5
 256:	bf ef       	ldi	r27, 0xFF	; 255
 258:	e0 e7       	ldi	r30, 0x70	; 112
 25a:	f2 e0       	ldi	r31, 0x02	; 2
 25c:	b1 50       	subi	r27, 0x01	; 1
 25e:	e0 40       	sbci	r30, 0x00	; 0
 260:	f0 40       	sbci	r31, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <dht_GetTemp+0xe4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <dht_GetTemp+0xee>
 266:	00 00       	nop
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	3b 81       	ldd	r19, Y+3	; 0x03
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	82 0f       	add	r24, r18
 270:	83 0f       	add	r24, r19
 272:	9c 81       	ldd	r25, Y+4	; 0x04
 274:	89 0f       	add	r24, r25
 276:	9d 81       	ldd	r25, Y+5	; 0x05
 278:	89 13       	cpse	r24, r25
 27a:	0e c0       	rjmp	.+28     	; 0x298 <dht_GetTemp+0x120>
 27c:	d6 01       	movw	r26, r12
 27e:	3c 93       	st	X, r19
 280:	fb 01       	movw	r30, r22
 282:	20 83       	st	Z, r18
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	09 c0       	rjmp	.+18     	; 0x29a <dht_GetTemp+0x122>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	07 c0       	rjmp	.+14     	; 0x29a <dht_GetTemp+0x122>
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	05 c0       	rjmp	.+10     	; 0x29a <dht_GetTemp+0x122>
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	03 c0       	rjmp	.+6      	; 0x29a <dht_GetTemp+0x122>
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	01 c0       	rjmp	.+2      	; 0x29a <dht_GetTemp+0x122>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	08 95       	ret

000002b6 <TimerOn>:
 2b6:	8b e0       	ldi	r24, 0x0B	; 11
 2b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2bc:	8d e7       	ldi	r24, 0x7D	; 125
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2de:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2e2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2e6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 2ea:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 2ee:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 2f2:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
 2f6:	8f b7       	in	r24, 0x3f	; 63
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	8f bf       	out	0x3f, r24	; 63
 2fc:	08 95       	ret

000002fe <__vector_13>:
}
ISR(TIMER1_COMPA_vect) {
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 310:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_avr_timer_cntcurr>
 314:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <_avr_timer_cntcurr+0x1>
 318:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <_avr_timer_cntcurr+0x2>
 31c:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x3>
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	a1 09       	sbc	r26, r1
 324:	b1 09       	sbc	r27, r1
 326:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 32a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 32e:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 332:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0) {
 336:	89 2b       	or	r24, r25
 338:	8a 2b       	or	r24, r26
 33a:	8b 2b       	or	r24, r27
 33c:	99 f4       	brne	.+38     	; 0x364 <__vector_13+0x66>
}
void TimerOff() {
	TCCR1B = 0x00;
}
void TimerISR() {
	TimerFlag = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <TimerFlag>
}
ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 348:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 34c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 350:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 354:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_cntcurr>
 358:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_cntcurr+0x1>
 35c:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <_avr_timer_cntcurr+0x2>
 360:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <_avr_timer_cntcurr+0x3>
	}
}
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <TimerSet>:
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 376:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 37a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 37e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 382:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 386:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <_avr_timer_cntcurr>
 38a:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <_avr_timer_cntcurr+0x1>
 38e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr+0x2>
 392:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x3>
 396:	08 95       	ret

00000398 <WaterChar>:
}
void WaterChar() { // print raindrop
	LCD_WriteCommand(64);
 398:	80 e4       	ldi	r24, 0x40	; 64
 39a:	a9 de       	rcall	.-686    	; 0xee <LCD_WriteCommand>
	LCD_WriteData(0);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	ca de       	rcall	.-620    	; 0x134 <LCD_WriteData>
	LCD_WriteData(4);
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	c8 de       	rcall	.-624    	; 0x134 <LCD_WriteData>
	LCD_WriteData(10);
 3a4:	8a e0       	ldi	r24, 0x0A	; 10
 3a6:	c6 de       	rcall	.-628    	; 0x134 <LCD_WriteData>
	LCD_WriteData(17);
 3a8:	81 e1       	ldi	r24, 0x11	; 17
 3aa:	c4 de       	rcall	.-632    	; 0x134 <LCD_WriteData>
	LCD_WriteData(25);
 3ac:	89 e1       	ldi	r24, 0x19	; 25
 3ae:	c2 de       	rcall	.-636    	; 0x134 <LCD_WriteData>
	LCD_WriteData(21);
 3b0:	85 e1       	ldi	r24, 0x15	; 21
 3b2:	c0 de       	rcall	.-640    	; 0x134 <LCD_WriteData>
	LCD_WriteData(14);
 3b4:	8e e0       	ldi	r24, 0x0E	; 14
 3b6:	be de       	rcall	.-644    	; 0x134 <LCD_WriteData>
	LCD_WriteData(0);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	bc de       	rcall	.-648    	; 0x134 <LCD_WriteData>
	LCD_WriteCommand(0xB8); // row on the LCD
 3bc:	88 eb       	ldi	r24, 0xB8	; 184
 3be:	97 de       	rcall	.-722    	; 0xee <LCD_WriteCommand>
 3c0:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(5); // column of LCD
 3c2:	b8 de       	rcall	.-656    	; 0x134 <LCD_WriteData>
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(10);
 3c8:	7f ce       	rjmp	.-770    	; 0xc8 <delay_ms>
 3ca:	08 95       	ret

000003cc <SunChar>:
 3cc:	88 e6       	ldi	r24, 0x68	; 104
 3ce:	8f de       	rcall	.-738    	; 0xee <LCD_WriteCommand>
 3d0:	84 e0       	ldi	r24, 0x04	; 4
}
void SunChar() { //print sun
	LCD_WriteCommand(104);
	LCD_WriteData(4);
 3d2:	b0 de       	rcall	.-672    	; 0x134 <LCD_WriteData>
	LCD_WriteData(21);
 3d4:	85 e1       	ldi	r24, 0x15	; 21
 3d6:	ae de       	rcall	.-676    	; 0x134 <LCD_WriteData>
	LCD_WriteData(14);
 3d8:	8e e0       	ldi	r24, 0x0E	; 14
 3da:	ac de       	rcall	.-680    	; 0x134 <LCD_WriteData>
	LCD_WriteData(14);
 3dc:	8e e0       	ldi	r24, 0x0E	; 14
 3de:	aa de       	rcall	.-684    	; 0x134 <LCD_WriteData>
	LCD_WriteData(14);
 3e0:	8e e0       	ldi	r24, 0x0E	; 14
 3e2:	a8 de       	rcall	.-688    	; 0x134 <LCD_WriteData>
	LCD_WriteData(14);
 3e4:	8e e0       	ldi	r24, 0x0E	; 14
 3e6:	a6 de       	rcall	.-692    	; 0x134 <LCD_WriteData>
	LCD_WriteData(21);
 3e8:	85 e1       	ldi	r24, 0x15	; 21
 3ea:	a4 de       	rcall	.-696    	; 0x134 <LCD_WriteData>
	LCD_WriteData(4);
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	a2 de       	rcall	.-700    	; 0x134 <LCD_WriteData>
	LCD_WriteCommand(0xB8);
 3f0:	88 eb       	ldi	r24, 0xB8	; 184
 3f2:	7d de       	rcall	.-774    	; 0xee <LCD_WriteCommand>
 3f4:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(5);
 3f6:	9e de       	rcall	.-708    	; 0x134 <LCD_WriteData>
 3f8:	8a e0       	ldi	r24, 0x0A	; 10
 3fa:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(10);
 3fc:	65 ce       	rjmp	.-822    	; 0xc8 <delay_ms>
 3fe:	08 95       	ret

00000400 <LCD_print>:
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
}

 void LCD_print(uint16_t temp, unsigned char cur_count) {
 406:	16 2f       	mov	r17, r22
	sensor1 = 48;
 408:	20 e3       	ldi	r18, 0x30	; 48
 40a:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <sensor1>
	sensor2 = 48;
 40e:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <sensor2>
	sensor3 = 48;
 412:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <sensor3>
	uint16_t tempF = (temp * (9.0 / 5)) + 32;
 416:	bc 01       	movw	r22, r24
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	1f d2       	rcall	.+1086   	; 0x85c <__floatunsisf>
 41e:	26 e6       	ldi	r18, 0x66	; 102
 420:	36 e6       	ldi	r19, 0x66	; 102
 422:	46 ee       	ldi	r20, 0xE6	; 230
 424:	5f e3       	ldi	r21, 0x3F	; 63
 426:	a8 d2       	rcall	.+1360   	; 0x978 <__mulsf3>
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	52 e4       	ldi	r21, 0x42	; 66
 430:	85 d1       	rcall	.+778    	; 0x73c <__addsf3>
 432:	e8 d1       	rcall	.+976    	; 0x804 <__fixunssfsi>
 434:	eb 01       	movw	r28, r22
	
	LCD_Cursor(cur_count);
 436:	81 2f       	mov	r24, r17
 438:	66 de       	rcall	.-820    	; 0x106 <LCD_Cursor>
 43a:	c4 36       	cpi	r28, 0x64	; 100
	if(tempF >= 100 ) {
 43c:	d1 05       	cpc	r29, r1
 43e:	20 f0       	brcs	.+8      	; 0x448 <LCD_print+0x48>
 440:	81 e3       	ldi	r24, 0x31	; 49
		sensor1 = 49; 
 442:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <sensor1>
 446:	03 c0       	rjmp	.+6      	; 0x44e <LCD_print+0x4e>
 448:	80 e2       	ldi	r24, 0x20	; 32
		temp -= 100;
	} else {
		sensor1 = ' ';
 44a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <sensor1>
	}
	
	LCD_WriteData(sensor1);
 44e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <sensor1>
 452:	70 de       	rcall	.-800    	; 0x134 <LCD_WriteData>
	cur_count++;

	LCD_Cursor(cur_count);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	81 0f       	add	r24, r17
 458:	56 de       	rcall	.-852    	; 0x106 <LCD_Cursor>
 45a:	ca 30       	cpi	r28, 0x0A	; 10
	while(tempF >= 10 ) {
 45c:	d1 05       	cpc	r29, r1
 45e:	68 f0       	brcs	.+26     	; 0x47a <LCD_print+0x7a>
 460:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sensor2>
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	01 c0       	rjmp	.+2      	; 0x46a <LCD_print+0x6a>
 468:	89 2f       	mov	r24, r25
 46a:	2a 97       	sbiw	r28, 0x0a	; 10
		sensor2++;
		tempF -= 10;
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	98 0f       	add	r25, r24
 470:	ca 30       	cpi	r28, 0x0A	; 10
	
	LCD_WriteData(sensor1);
	cur_count++;

	LCD_Cursor(cur_count);
	while(tempF >= 10 ) {
 472:	d1 05       	cpc	r29, r1
 474:	c8 f7       	brcc	.-14     	; 0x468 <LCD_print+0x68>
 476:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensor2>
		sensor2++;
		tempF -= 10;
	}
	
	LCD_WriteData(sensor2);
 47a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sensor2>
 47e:	5a de       	rcall	.-844    	; 0x134 <LCD_WriteData>
	cur_count++;	
	sensor3 += tempF;  
 480:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sensor3>
 484:	6c 0f       	add	r22, r28
 486:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <sensor3>
	
	LCD_Cursor(cur_count);
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	81 0f       	add	r24, r17
 48e:	3b de       	rcall	.-906    	; 0x106 <LCD_Cursor>
	LCD_WriteData(sensor3);
 490:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <sensor3>
 494:	4f de       	rcall	.-866    	; 0x134 <LCD_WriteData>
 496:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Cursor(0);
 498:	36 de       	rcall	.-916    	; 0x106 <LCD_Cursor>
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
	
}
 49e:	1f 91       	pop	r17
 4a0:	08 95       	ret

000004a2 <TickFanState>:
 4a2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <fanState>

void TickFanState() {

	switch(fanState) {
 4a6:	88 23       	and	r24, r24
 4a8:	19 f0       	breq	.+6      	; 0x4b0 <TickFanState+0xe>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	29 f1       	breq	.+74     	; 0x4f8 <TickFanState+0x56>
 4ae:	45 c0       	rjmp	.+138    	; 0x53a <TickFanState+0x98>
		case SM_off :
		if(user1 == sensor1 && user2 == sensor2 && user3 <= sensor3) { 
 4b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <user1>
 4b4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <sensor1>
 4b8:	89 13       	cpse	r24, r25
 4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <TickFanState+0x46>
 4bc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <user2>
 4c0:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <sensor2>
 4c4:	32 13       	cpse	r19, r18
 4c6:	0a c0       	rjmp	.+20     	; 0x4dc <TickFanState+0x3a>
 4c8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <user3>
 4cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <sensor3>
 4d0:	89 17       	cp	r24, r25
 4d2:	30 f0       	brcs	.+12     	; 0x4e0 <TickFanState+0x3e>
			fanState = SM_on;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <fanState>
 4da:	37 c0       	rjmp	.+110    	; 0x54a <TickFanState+0xa8>
			} else if(user1 == sensor1 && user2 <= sensor2) {
 4dc:	23 17       	cp	r18, r19
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <TickFanState+0x46>
			fanState = SM_on;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <fanState>
 4e6:	31 c0       	rjmp	.+98     	; 0x54a <TickFanState+0xa8>
			} else if(user1 == ' ' && sensor1 == (0x01 + '0')) { 
 4e8:	80 32       	cpi	r24, 0x20	; 32
 4ea:	61 f5       	brne	.+88     	; 0x544 <TickFanState+0xa2>
 4ec:	91 33       	cpi	r25, 0x31	; 49
 4ee:	51 f5       	brne	.+84     	; 0x544 <TickFanState+0xa2>
			fanState = SM_on;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <fanState>
 4f6:	29 c0       	rjmp	.+82     	; 0x54a <TickFanState+0xa8>
			fanState = SM_off;
		}
		break;
		
		case SM_on :
		if(user1 == sensor1 && user2 == sensor2 && sensor3 < user3) {
 4f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <user1>
 4fc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <sensor1>
 500:	89 13       	cpse	r24, r25
 502:	14 c0       	rjmp	.+40     	; 0x52c <TickFanState+0x8a>
 504:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <user2>
 508:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <sensor2>
 50c:	32 13       	cpse	r19, r18
 50e:	09 c0       	rjmp	.+18     	; 0x522 <TickFanState+0x80>
 510:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <sensor3>
 514:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <user3>
 518:	32 17       	cp	r19, r18
 51a:	40 f4       	brcc	.+16     	; 0x52c <TickFanState+0x8a>
			fanState = SM_off;
 51c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <fanState>
 520:	11 c0       	rjmp	.+34     	; 0x544 <TickFanState+0xa2>
			} else if(user1 == sensor1 && sensor2 < user2) { 
 522:	23 17       	cp	r18, r19
 524:	18 f4       	brcc	.+6      	; 0x52c <TickFanState+0x8a>
			fanState = SM_off;
 526:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <fanState>
 52a:	0c c0       	rjmp	.+24     	; 0x544 <TickFanState+0xa2>
			} else if(user1 == (0x01 + '0') && sensor1 == ' ') {
 52c:	81 33       	cpi	r24, 0x31	; 49
 52e:	69 f4       	brne	.+26     	; 0x54a <TickFanState+0xa8>
 530:	90 32       	cpi	r25, 0x20	; 32
 532:	59 f4       	brne	.+22     	; 0x54a <TickFanState+0xa8>
			fanState = SM_off;
 534:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <fanState>
 538:	05 c0       	rjmp	.+10     	; 0x544 <TickFanState+0xa2>
			fanState = SM_on;
			}
			break;
	}
		
		switch(fanState) {
 53a:	88 23       	and	r24, r24
 53c:	19 f0       	breq	.+6      	; 0x544 <TickFanState+0xa2>
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	31 f4       	brne	.+12     	; 0x54e <TickFanState+0xac>
 542:	03 c0       	rjmp	.+6      	; 0x54a <TickFanState+0xa8>
			case SM_off :
				PORTD &= ~(1 << PIND5);
 544:	5d 98       	cbi	0x0b, 5	; 11
				WaterChar();
 546:	28 df       	rcall	.-432    	; 0x398 <WaterChar>
				break;
 548:	02 c0       	rjmp	.+4      	; 0x54e <TickFanState+0xac>
			
			case SM_on :
				PORTD |= (1 << PIND5);
				SunChar();
 54a:	5d 9a       	sbi	0x0b, 5	; 11
 54c:	3f df       	rcall	.-386    	; 0x3cc <SunChar>
			break;
	}
			LCD_DisplayString(1, "User Temp:");
 54e:	67 e0       	ldi	r22, 0x07	; 7
 550:	71 e0       	ldi	r23, 0x01	; 1
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	f8 dd       	rcall	.-1040   	; 0x146 <LCD_DisplayString>
			LCD_WriteData(user1);
 556:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <user1>
 55a:	ec dd       	rcall	.-1064   	; 0x134 <LCD_WriteData>
			LCD_WriteData(user2);
 55c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <user2>
 560:	e9 dd       	rcall	.-1070   	; 0x134 <LCD_WriteData>
			LCD_WriteData(user3);
 562:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <user3>
 566:	e6 dd       	rcall	.-1076   	; 0x134 <LCD_WriteData>
			if(fanState == SM_on) {
 568:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <fanState>
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	09 f4       	brne	.+2      	; 0x572 <TickFanState+0xd0>
				SunChar();
 570:	2d cf       	rjmp	.-422    	; 0x3cc <SunChar>
 572:	08 95       	ret

00000574 <TickTempState>:
 574:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <userTempState>

}


void TickTempState() {
	switch(userTempState) {
 578:	88 23       	and	r24, r24
 57a:	19 f0       	breq	.+6      	; 0x582 <TickTempState+0xe>
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	39 f0       	breq	.+14     	; 0x58e <TickTempState+0x1a>
 580:	84 c0       	rjmp	.+264    	; 0x68a <TickTempState+0x116>
		case SM_Init :
			if((~PINA & 0x04) == 0x04) {
 582:	02 99       	sbic	0x00, 2	; 0
 584:	96 c0       	rjmp	.+300    	; 0x6b2 <TickTempState+0x13e>
				userTempState = SM_select;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <userTempState>
 58c:	08 95       	ret
			} else {
				userTempState = SM_Init;
			}
			break;
		case SM_select :
			if((~PINA & 0x01) == 0x01) {
 58e:	00 99       	sbic	0x00, 0	; 0
 590:	44 c0       	rjmp	.+136    	; 0x61a <TickTempState+0xa6>
				userTempState = SM_select;
				
				if(user1 == (0x01 + '0') && user2 == (0x02 + '0') && user3 == (0x05 + '0')) { // wont exceed 125
 592:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <user1>
 596:	91 33       	cpi	r25, 0x31	; 49
 598:	51 f4       	brne	.+20     	; 0x5ae <TickTempState+0x3a>
 59a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <user2>
 59e:	82 33       	cpi	r24, 0x32	; 50
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <TickTempState+0x30>
 5a2:	76 c0       	rjmp	.+236    	; 0x690 <TickTempState+0x11c>
 5a4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <user3>
 5a8:	95 33       	cpi	r25, 0x35	; 53
 5aa:	31 f5       	brne	.+76     	; 0x5f8 <TickTempState+0x84>
 5ac:	08 95       	ret
					user1 = (0x01 + '0'); user2 = (0x02 + '0'); user3 = (0x05 + '0');
					
				} else if(user2 == (0x09 + '0') && user3 == (0x09 + '0')) {// go from 99 to 100
 5ae:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <user2>
 5b2:	89 33       	cpi	r24, 0x39	; 57
 5b4:	71 f4       	brne	.+28     	; 0x5d2 <TickTempState+0x5e>
 5b6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <user3>
 5ba:	29 33       	cpi	r18, 0x39	; 57
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <TickTempState+0x4c>
 5be:	6c c0       	rjmp	.+216    	; 0x698 <TickTempState+0x124>
					user1 = (0x01 + '0'); user2 = (0x00 + '0'); user3 = (0x00 + '0');
 5c0:	81 e3       	ldi	r24, 0x31	; 49
 5c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <user1>
 5c6:	80 e3       	ldi	r24, 0x30	; 48
 5c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <user2>
 5cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <user3>
 5d0:	08 95       	ret
					
				} else if(user1 == ' ' && user2 <= (0x09 + '0') && user3 >= (0x09 + '0')) { // go from 80 to 90 
 5d2:	90 32       	cpi	r25, 0x20	; 32
 5d4:	e1 f4       	brne	.+56     	; 0x60e <TickTempState+0x9a>
 5d6:	8a 33       	cpi	r24, 0x3A	; 58
 5d8:	d0 f4       	brcc	.+52     	; 0x60e <TickTempState+0x9a>
 5da:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <user3>
 5de:	99 33       	cpi	r25, 0x39	; 57
 5e0:	b0 f0       	brcs	.+44     	; 0x60e <TickTempState+0x9a>
					user1 = ' '; user2++; user3 = (0x00 + '0');
 5e2:	8f 5f       	subi	r24, 0xFF	; 255
 5e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <user2>
 5e8:	80 e3       	ldi	r24, 0x30	; 48
 5ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <user3>
 5ee:	08 95       	ret
					
				} else if(user1 == (0x01 + '0') && user2 <= (0x09 + '0') && user3 >= (0x09 + '0')) {
 5f0:	91 33       	cpi	r25, 0x31	; 49
 5f2:	69 f4       	brne	.+26     	; 0x60e <TickTempState+0x9a>
 5f4:	8a 33       	cpi	r24, 0x3A	; 58
 5f6:	58 f4       	brcc	.+22     	; 0x60e <TickTempState+0x9a>
 5f8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <user3>
 5fc:	99 33       	cpi	r25, 0x39	; 57
 5fe:	38 f0       	brcs	.+14     	; 0x60e <TickTempState+0x9a>
					user1 = (0x01 + '0'); user2++; user3 = (0x00 + '0');
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <user2>
 606:	80 e3       	ldi	r24, 0x30	; 48
 608:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <user3>
 60c:	08 95       	ret
					
				} else {
					user3++; // regular increment
 60e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <user3>
 612:	8f 5f       	subi	r24, 0xFF	; 255
 614:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <user3>
 618:	08 95       	ret
				}
				
			} else if((~PINA & 0x02) == 0x02) {
 61a:	01 99       	sbic	0x00, 1	; 0
 61c:	31 c0       	rjmp	.+98     	; 0x680 <TickTempState+0x10c>
				userTempState = SM_select;
				
				if(user1 == ' ' && user2 == (0x06 + '0') && user3 == (0x00 + '0')) { // wont go below 75
 61e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <user1>
 622:	80 32       	cpi	r24, 0x20	; 32
 624:	49 f4       	brne	.+18     	; 0x638 <TickTempState+0xc4>
 626:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <user2>
 62a:	86 33       	cpi	r24, 0x36	; 54
 62c:	c1 f4       	brne	.+48     	; 0x65e <TickTempState+0xea>
 62e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <user3>
 632:	80 33       	cpi	r24, 0x30	; 48
 634:	d9 f5       	brne	.+118    	; 0x6ac <TickTempState+0x138>
 636:	08 95       	ret
					user1 = ' '; user2 = (0x06 + '0'); user3 = (0x00 + '0');
					
				} else if(user1 == (0x01 + '0') && user2 == (0x00 +'0') && user3 == (0x00 +'0')) {//go from 100 to 99
 638:	81 33       	cpi	r24, 0x31	; 49
 63a:	89 f4       	brne	.+34     	; 0x65e <TickTempState+0xea>
 63c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <user2>
 640:	80 33       	cpi	r24, 0x30	; 48
 642:	69 f4       	brne	.+26     	; 0x65e <TickTempState+0xea>
 644:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <user3>
 648:	80 33       	cpi	r24, 0x30	; 48
 64a:	b1 f4       	brne	.+44     	; 0x678 <TickTempState+0x104>
					user1 = ' '; user2 = (0x09 + '0'); user3 = (0x09 + '0');
 64c:	80 e2       	ldi	r24, 0x20	; 32
 64e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <user1>
 652:	89 e3       	ldi	r24, 0x39	; 57
 654:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <user2>
 658:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <user3>
 65c:	08 95       	ret
					
				} else if(user3 == (0x00 + '0')) {  // go from 90 to 89 for example
 65e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <user3>
 662:	80 33       	cpi	r24, 0x30	; 48
 664:	49 f4       	brne	.+18     	; 0x678 <TickTempState+0x104>
					user2--; user3 = (0x09 + '0');
 666:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <user2>
 66a:	81 50       	subi	r24, 0x01	; 1
 66c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <user2>
 670:	89 e3       	ldi	r24, 0x39	; 57
 672:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <user3>
 676:	08 95       	ret
					
				} else {
					user3--; // regular decrement
 678:	81 50       	subi	r24, 0x01	; 1
 67a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <user3>
 67e:	08 95       	ret
				}
				
			} else if((~PINA & 0x04) == 0x04) {
 680:	02 99       	sbic	0x00, 2	; 0
 682:	17 c0       	rjmp	.+46     	; 0x6b2 <TickTempState+0x13e>
				userTempState = SM_Init;
 684:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <userTempState>
 688:	08 95       	ret
			}
			break;
		default : 
			userTempState = SM_Init;
 68a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <userTempState>
			break;
	}	
}
 68e:	08 95       	ret
				userTempState = SM_select;
				
				if(user1 == (0x01 + '0') && user2 == (0x02 + '0') && user3 == (0x05 + '0')) { // wont exceed 125
					user1 = (0x01 + '0'); user2 = (0x02 + '0'); user3 = (0x05 + '0');
					
				} else if(user2 == (0x09 + '0') && user3 == (0x09 + '0')) {// go from 99 to 100
 690:	89 33       	cpi	r24, 0x39	; 57
 692:	09 f0       	breq	.+2      	; 0x696 <TickTempState+0x122>
 694:	af cf       	rjmp	.-162    	; 0x5f4 <TickTempState+0x80>
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <TickTempState+0x12c>
					user1 = (0x01 + '0'); user2 = (0x00 + '0'); user3 = (0x00 + '0');
					
				} else if(user1 == ' ' && user2 <= (0x09 + '0') && user3 >= (0x09 + '0')) { // go from 80 to 90 
 698:	90 32       	cpi	r25, 0x20	; 32
 69a:	09 f0       	breq	.+2      	; 0x69e <TickTempState+0x12a>
 69c:	a9 cf       	rjmp	.-174    	; 0x5f0 <TickTempState+0x7c>
 69e:	9d cf       	rjmp	.-198    	; 0x5da <TickTempState+0x66>
				userTempState = SM_select;
				
				if(user1 == (0x01 + '0') && user2 == (0x02 + '0') && user3 == (0x05 + '0')) { // wont exceed 125
					user1 = (0x01 + '0'); user2 = (0x02 + '0'); user3 = (0x05 + '0');
					
				} else if(user2 == (0x09 + '0') && user3 == (0x09 + '0')) {// go from 99 to 100
 6a0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <user3>
 6a4:	29 33       	cpi	r18, 0x39	; 57
 6a6:	09 f0       	breq	.+2      	; 0x6aa <TickTempState+0x136>
 6a8:	a3 cf       	rjmp	.-186    	; 0x5f0 <TickTempState+0x7c>
 6aa:	8a cf       	rjmp	.-236    	; 0x5c0 <TickTempState+0x4c>
					user1 = ' '; user2 = (0x06 + '0'); user3 = (0x00 + '0');
					
				} else if(user1 == (0x01 + '0') && user2 == (0x00 +'0') && user3 == (0x00 +'0')) {//go from 100 to 99
					user1 = ' '; user2 = (0x09 + '0'); user3 = (0x09 + '0');
					
				} else if(user3 == (0x00 + '0')) {  // go from 90 to 89 for example
 6ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <user3>
 6b0:	e3 cf       	rjmp	.-58     	; 0x678 <TickTempState+0x104>
 6b2:	08 95       	ret

000006b4 <main>:
	}	
}

int main(void)
{
	DDRA = 0xF0; PORTA = 0x0F; 
 6b4:	80 ef       	ldi	r24, 0xF0	; 240
 6b6:	81 b9       	out	0x01, r24	; 1
 6b8:	8f e0       	ldi	r24, 0x0F	; 15
 6ba:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; 
 6bc:	8f ef       	ldi	r24, 0xFF	; 255
 6be:	87 b9       	out	0x07, r24	; 7
 6c0:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 6c2:	8a b9       	out	0x0a, r24	; 10
 6c4:	1b b8       	out	0x0b, r1	; 11

	LCD_init();
 6c6:	27 dd       	rcall	.-1458   	; 0x116 <LCD_init>
	LCD_ClearScreen();
 6c8:	1b dd       	rcall	.-1482   	; 0x100 <LCD_ClearScreen>
 6ca:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6cc:	89 e6       	ldi	r24, 0x69	; 105
 6ce:	98 e1       	ldi	r25, 0x18	; 24
 6d0:	21 50       	subi	r18, 0x01	; 1
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	90 40       	sbci	r25, 0x00	; 0
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0x1c>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0x26>
 6da:	00 00       	nop
 6dc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <userTempState>
	
	_delay_ms(1000);
	userTempState = SM_Init;
 6e0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <fanState>
	fanState = SM_off;
 6e4:	64 e6       	ldi	r22, 0x64	; 100
	

	TimerSet(100);
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	44 de       	rcall	.-888    	; 0x376 <TimerSet>
	TimerOn();
 6ee:	e3 dd       	rcall	.-1082   	; 0x2b6 <TimerOn>
 6f0:	68 e1       	ldi	r22, 0x18	; 24
	#if DHT_TYPE == 1
	int8_t dht_GetTempUtil(uint16_t *temperature, uint16_t *humidity) {
		#elif DHT_TYPE == 0
		int8_t dht_GetTempUtil(int8_t *temperature, int8_t *humidity) {
			#endif
			return dht_GetTemp(temperature, humidity);
 6f2:	71 e0       	ldi	r23, 0x01	; 1
 6f4:	89 e1       	ldi	r24, 0x19	; 25
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	3f dd       	rcall	.-1410   	; 0x178 <dht_GetTemp>
 6fa:	8f 3f       	cpi	r24, 0xFF	; 255
	while (1)
	{
			if (dht_GetTempUtil(&temperature_int, &humidity_int) != -1) {
 6fc:	41 f0       	breq	.+16     	; 0x70e <main+0x5a>
 6fe:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <temperature_int>
				LCD_print(temperature_int, 27);
 702:	6b e1       	ldi	r22, 0x1B	; 27
 704:	08 2e       	mov	r0, r24
 706:	00 0c       	add	r0, r0
 708:	99 0b       	sbc	r25, r25
 70a:	7a de       	rcall	.-780    	; 0x400 <LCD_print>
 70c:	04 c0       	rjmp	.+8      	; 0x716 <main+0x62>
			}
			
			else {LCD_DisplayString (1, "error");}
 70e:	62 e1       	ldi	r22, 0x12	; 18
 710:	71 e0       	ldi	r23, 0x01	; 1
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	18 dd       	rcall	.-1488   	; 0x146 <LCD_DisplayString>
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	8e e9       	ldi	r24, 0x9E	; 158
 71a:	94 e2       	ldi	r25, 0x24	; 36
 71c:	21 50       	subi	r18, 0x01	; 1
 71e:	80 40       	sbci	r24, 0x00	; 0
 720:	90 40       	sbci	r25, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <main+0x68>
 724:	00 c0       	rjmp	.+0      	; 0x726 <main+0x72>

			_delay_ms(1500);
		
		TickTempState();
 726:	00 00       	nop
 728:	25 df       	rcall	.-438    	; 0x574 <TickTempState>
		TickFanState();
 72a:	bb de       	rcall	.-650    	; 0x4a2 <TickFanState>
 72c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <TimerFlag>
		while(!TimerFlag) {}
 730:	88 23       	and	r24, r24
 732:	e1 f3       	breq	.-8      	; 0x72c <main+0x78>
 734:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <TimerFlag>
		TimerFlag = 0;
 738:	db cf       	rjmp	.-74     	; 0x6f0 <main+0x3c>

0000073a <__subsf3>:
	}
 73a:	50 58       	subi	r21, 0x80	; 128

0000073c <__addsf3>:
 73c:	bb 27       	eor	r27, r27
 73e:	aa 27       	eor	r26, r26
 740:	0e d0       	rcall	.+28     	; 0x75e <__addsf3x>
 742:	e0 c0       	rjmp	.+448    	; 0x904 <__fp_round>
 744:	d1 d0       	rcall	.+418    	; 0x8e8 <__fp_pscA>
 746:	30 f0       	brcs	.+12     	; 0x754 <__addsf3+0x18>
 748:	d6 d0       	rcall	.+428    	; 0x8f6 <__fp_pscB>
 74a:	20 f0       	brcs	.+8      	; 0x754 <__addsf3+0x18>
 74c:	31 f4       	brne	.+12     	; 0x75a <__addsf3+0x1e>
 74e:	9f 3f       	cpi	r25, 0xFF	; 255
 750:	11 f4       	brne	.+4      	; 0x756 <__addsf3+0x1a>
 752:	1e f4       	brtc	.+6      	; 0x75a <__addsf3+0x1e>
 754:	c6 c0       	rjmp	.+396    	; 0x8e2 <__fp_nan>
 756:	0e f4       	brtc	.+2      	; 0x75a <__addsf3+0x1e>
 758:	e0 95       	com	r30
 75a:	e7 fb       	bst	r30, 7
 75c:	bc c0       	rjmp	.+376    	; 0x8d6 <__fp_inf>

0000075e <__addsf3x>:
 75e:	e9 2f       	mov	r30, r25
 760:	e2 d0       	rcall	.+452    	; 0x926 <__fp_split3>
 762:	80 f3       	brcs	.-32     	; 0x744 <__addsf3+0x8>
 764:	ba 17       	cp	r27, r26
 766:	62 07       	cpc	r22, r18
 768:	73 07       	cpc	r23, r19
 76a:	84 07       	cpc	r24, r20
 76c:	95 07       	cpc	r25, r21
 76e:	18 f0       	brcs	.+6      	; 0x776 <__addsf3x+0x18>
 770:	71 f4       	brne	.+28     	; 0x78e <__addsf3x+0x30>
 772:	9e f5       	brtc	.+102    	; 0x7da <__addsf3x+0x7c>
 774:	fa c0       	rjmp	.+500    	; 0x96a <__fp_zero>
 776:	0e f4       	brtc	.+2      	; 0x77a <__addsf3x+0x1c>
 778:	e0 95       	com	r30
 77a:	0b 2e       	mov	r0, r27
 77c:	ba 2f       	mov	r27, r26
 77e:	a0 2d       	mov	r26, r0
 780:	0b 01       	movw	r0, r22
 782:	b9 01       	movw	r22, r18
 784:	90 01       	movw	r18, r0
 786:	0c 01       	movw	r0, r24
 788:	ca 01       	movw	r24, r20
 78a:	a0 01       	movw	r20, r0
 78c:	11 24       	eor	r1, r1
 78e:	ff 27       	eor	r31, r31
 790:	59 1b       	sub	r21, r25
 792:	99 f0       	breq	.+38     	; 0x7ba <__addsf3x+0x5c>
 794:	59 3f       	cpi	r21, 0xF9	; 249
 796:	50 f4       	brcc	.+20     	; 0x7ac <__addsf3x+0x4e>
 798:	50 3e       	cpi	r21, 0xE0	; 224
 79a:	68 f1       	brcs	.+90     	; 0x7f6 <__addsf3x+0x98>
 79c:	1a 16       	cp	r1, r26
 79e:	f0 40       	sbci	r31, 0x00	; 0
 7a0:	a2 2f       	mov	r26, r18
 7a2:	23 2f       	mov	r18, r19
 7a4:	34 2f       	mov	r19, r20
 7a6:	44 27       	eor	r20, r20
 7a8:	58 5f       	subi	r21, 0xF8	; 248
 7aa:	f3 cf       	rjmp	.-26     	; 0x792 <__addsf3x+0x34>
 7ac:	46 95       	lsr	r20
 7ae:	37 95       	ror	r19
 7b0:	27 95       	ror	r18
 7b2:	a7 95       	ror	r26
 7b4:	f0 40       	sbci	r31, 0x00	; 0
 7b6:	53 95       	inc	r21
 7b8:	c9 f7       	brne	.-14     	; 0x7ac <__addsf3x+0x4e>
 7ba:	7e f4       	brtc	.+30     	; 0x7da <__addsf3x+0x7c>
 7bc:	1f 16       	cp	r1, r31
 7be:	ba 0b       	sbc	r27, r26
 7c0:	62 0b       	sbc	r22, r18
 7c2:	73 0b       	sbc	r23, r19
 7c4:	84 0b       	sbc	r24, r20
 7c6:	ba f0       	brmi	.+46     	; 0x7f6 <__addsf3x+0x98>
 7c8:	91 50       	subi	r25, 0x01	; 1
 7ca:	a1 f0       	breq	.+40     	; 0x7f4 <__addsf3x+0x96>
 7cc:	ff 0f       	add	r31, r31
 7ce:	bb 1f       	adc	r27, r27
 7d0:	66 1f       	adc	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	c2 f7       	brpl	.-16     	; 0x7c8 <__addsf3x+0x6a>
 7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <__addsf3x+0x98>
 7da:	ba 0f       	add	r27, r26
 7dc:	62 1f       	adc	r22, r18
 7de:	73 1f       	adc	r23, r19
 7e0:	84 1f       	adc	r24, r20
 7e2:	48 f4       	brcc	.+18     	; 0x7f6 <__addsf3x+0x98>
 7e4:	87 95       	ror	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b7 95       	ror	r27
 7ec:	f7 95       	ror	r31
 7ee:	9e 3f       	cpi	r25, 0xFE	; 254
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__addsf3x+0x96>
 7f2:	b3 cf       	rjmp	.-154    	; 0x75a <__addsf3+0x1e>
 7f4:	93 95       	inc	r25
 7f6:	88 0f       	add	r24, r24
 7f8:	08 f0       	brcs	.+2      	; 0x7fc <__addsf3x+0x9e>
 7fa:	99 27       	eor	r25, r25
 7fc:	ee 0f       	add	r30, r30
 7fe:	97 95       	ror	r25
 800:	87 95       	ror	r24
 802:	08 95       	ret

00000804 <__fixunssfsi>:
 804:	98 d0       	rcall	.+304    	; 0x936 <__fp_splitA>
 806:	88 f0       	brcs	.+34     	; 0x82a <__fixunssfsi+0x26>
 808:	9f 57       	subi	r25, 0x7F	; 127
 80a:	90 f0       	brcs	.+36     	; 0x830 <__fixunssfsi+0x2c>
 80c:	b9 2f       	mov	r27, r25
 80e:	99 27       	eor	r25, r25
 810:	b7 51       	subi	r27, 0x17	; 23
 812:	a0 f0       	brcs	.+40     	; 0x83c <__fixunssfsi+0x38>
 814:	d1 f0       	breq	.+52     	; 0x84a <__fixunssfsi+0x46>
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	1a f0       	brmi	.+6      	; 0x826 <__fixunssfsi+0x22>
 820:	ba 95       	dec	r27
 822:	c9 f7       	brne	.-14     	; 0x816 <__fixunssfsi+0x12>
 824:	12 c0       	rjmp	.+36     	; 0x84a <__fixunssfsi+0x46>
 826:	b1 30       	cpi	r27, 0x01	; 1
 828:	81 f0       	breq	.+32     	; 0x84a <__fixunssfsi+0x46>
 82a:	9f d0       	rcall	.+318    	; 0x96a <__fp_zero>
 82c:	b1 e0       	ldi	r27, 0x01	; 1
 82e:	08 95       	ret
 830:	9c c0       	rjmp	.+312    	; 0x96a <__fp_zero>
 832:	67 2f       	mov	r22, r23
 834:	78 2f       	mov	r23, r24
 836:	88 27       	eor	r24, r24
 838:	b8 5f       	subi	r27, 0xF8	; 248
 83a:	39 f0       	breq	.+14     	; 0x84a <__fixunssfsi+0x46>
 83c:	b9 3f       	cpi	r27, 0xF9	; 249
 83e:	cc f3       	brlt	.-14     	; 0x832 <__fixunssfsi+0x2e>
 840:	86 95       	lsr	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	b3 95       	inc	r27
 848:	d9 f7       	brne	.-10     	; 0x840 <__fixunssfsi+0x3c>
 84a:	3e f4       	brtc	.+14     	; 0x85a <__fixunssfsi+0x56>
 84c:	90 95       	com	r25
 84e:	80 95       	com	r24
 850:	70 95       	com	r23
 852:	61 95       	neg	r22
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	08 95       	ret

0000085c <__floatunsisf>:
 85c:	e8 94       	clt
 85e:	09 c0       	rjmp	.+18     	; 0x872 <__floatsisf+0x12>

00000860 <__floatsisf>:
 860:	97 fb       	bst	r25, 7
 862:	3e f4       	brtc	.+14     	; 0x872 <__floatsisf+0x12>
 864:	90 95       	com	r25
 866:	80 95       	com	r24
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	99 23       	and	r25, r25
 874:	a9 f0       	breq	.+42     	; 0x8a0 <__floatsisf+0x40>
 876:	f9 2f       	mov	r31, r25
 878:	96 e9       	ldi	r25, 0x96	; 150
 87a:	bb 27       	eor	r27, r27
 87c:	93 95       	inc	r25
 87e:	f6 95       	lsr	r31
 880:	87 95       	ror	r24
 882:	77 95       	ror	r23
 884:	67 95       	ror	r22
 886:	b7 95       	ror	r27
 888:	f1 11       	cpse	r31, r1
 88a:	f8 cf       	rjmp	.-16     	; 0x87c <__floatsisf+0x1c>
 88c:	fa f4       	brpl	.+62     	; 0x8cc <__floatsisf+0x6c>
 88e:	bb 0f       	add	r27, r27
 890:	11 f4       	brne	.+4      	; 0x896 <__floatsisf+0x36>
 892:	60 ff       	sbrs	r22, 0
 894:	1b c0       	rjmp	.+54     	; 0x8cc <__floatsisf+0x6c>
 896:	6f 5f       	subi	r22, 0xFF	; 255
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	8f 4f       	sbci	r24, 0xFF	; 255
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	16 c0       	rjmp	.+44     	; 0x8cc <__floatsisf+0x6c>
 8a0:	88 23       	and	r24, r24
 8a2:	11 f0       	breq	.+4      	; 0x8a8 <__floatsisf+0x48>
 8a4:	96 e9       	ldi	r25, 0x96	; 150
 8a6:	11 c0       	rjmp	.+34     	; 0x8ca <__floatsisf+0x6a>
 8a8:	77 23       	and	r23, r23
 8aa:	21 f0       	breq	.+8      	; 0x8b4 <__floatsisf+0x54>
 8ac:	9e e8       	ldi	r25, 0x8E	; 142
 8ae:	87 2f       	mov	r24, r23
 8b0:	76 2f       	mov	r23, r22
 8b2:	05 c0       	rjmp	.+10     	; 0x8be <__floatsisf+0x5e>
 8b4:	66 23       	and	r22, r22
 8b6:	71 f0       	breq	.+28     	; 0x8d4 <__floatsisf+0x74>
 8b8:	96 e8       	ldi	r25, 0x86	; 134
 8ba:	86 2f       	mov	r24, r22
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	2a f0       	brmi	.+10     	; 0x8cc <__floatsisf+0x6c>
 8c2:	9a 95       	dec	r25
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	da f7       	brpl	.-10     	; 0x8c2 <__floatsisf+0x62>
 8cc:	88 0f       	add	r24, r24
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	97 f9       	bld	r25, 7
 8d4:	08 95       	ret

000008d6 <__fp_inf>:
 8d6:	97 f9       	bld	r25, 7
 8d8:	9f 67       	ori	r25, 0x7F	; 127
 8da:	80 e8       	ldi	r24, 0x80	; 128
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	08 95       	ret

000008e2 <__fp_nan>:
 8e2:	9f ef       	ldi	r25, 0xFF	; 255
 8e4:	80 ec       	ldi	r24, 0xC0	; 192
 8e6:	08 95       	ret

000008e8 <__fp_pscA>:
 8e8:	00 24       	eor	r0, r0
 8ea:	0a 94       	dec	r0
 8ec:	16 16       	cp	r1, r22
 8ee:	17 06       	cpc	r1, r23
 8f0:	18 06       	cpc	r1, r24
 8f2:	09 06       	cpc	r0, r25
 8f4:	08 95       	ret

000008f6 <__fp_pscB>:
 8f6:	00 24       	eor	r0, r0
 8f8:	0a 94       	dec	r0
 8fa:	12 16       	cp	r1, r18
 8fc:	13 06       	cpc	r1, r19
 8fe:	14 06       	cpc	r1, r20
 900:	05 06       	cpc	r0, r21
 902:	08 95       	ret

00000904 <__fp_round>:
 904:	09 2e       	mov	r0, r25
 906:	03 94       	inc	r0
 908:	00 0c       	add	r0, r0
 90a:	11 f4       	brne	.+4      	; 0x910 <__fp_round+0xc>
 90c:	88 23       	and	r24, r24
 90e:	52 f0       	brmi	.+20     	; 0x924 <__fp_round+0x20>
 910:	bb 0f       	add	r27, r27
 912:	40 f4       	brcc	.+16     	; 0x924 <__fp_round+0x20>
 914:	bf 2b       	or	r27, r31
 916:	11 f4       	brne	.+4      	; 0x91c <__fp_round+0x18>
 918:	60 ff       	sbrs	r22, 0
 91a:	04 c0       	rjmp	.+8      	; 0x924 <__fp_round+0x20>
 91c:	6f 5f       	subi	r22, 0xFF	; 255
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	08 95       	ret

00000926 <__fp_split3>:
 926:	57 fd       	sbrc	r21, 7
 928:	90 58       	subi	r25, 0x80	; 128
 92a:	44 0f       	add	r20, r20
 92c:	55 1f       	adc	r21, r21
 92e:	59 f0       	breq	.+22     	; 0x946 <__fp_splitA+0x10>
 930:	5f 3f       	cpi	r21, 0xFF	; 255
 932:	71 f0       	breq	.+28     	; 0x950 <__fp_splitA+0x1a>
 934:	47 95       	ror	r20

00000936 <__fp_splitA>:
 936:	88 0f       	add	r24, r24
 938:	97 fb       	bst	r25, 7
 93a:	99 1f       	adc	r25, r25
 93c:	61 f0       	breq	.+24     	; 0x956 <__fp_splitA+0x20>
 93e:	9f 3f       	cpi	r25, 0xFF	; 255
 940:	79 f0       	breq	.+30     	; 0x960 <__fp_splitA+0x2a>
 942:	87 95       	ror	r24
 944:	08 95       	ret
 946:	12 16       	cp	r1, r18
 948:	13 06       	cpc	r1, r19
 94a:	14 06       	cpc	r1, r20
 94c:	55 1f       	adc	r21, r21
 94e:	f2 cf       	rjmp	.-28     	; 0x934 <__fp_split3+0xe>
 950:	46 95       	lsr	r20
 952:	f1 df       	rcall	.-30     	; 0x936 <__fp_splitA>
 954:	08 c0       	rjmp	.+16     	; 0x966 <__fp_splitA+0x30>
 956:	16 16       	cp	r1, r22
 958:	17 06       	cpc	r1, r23
 95a:	18 06       	cpc	r1, r24
 95c:	99 1f       	adc	r25, r25
 95e:	f1 cf       	rjmp	.-30     	; 0x942 <__fp_splitA+0xc>
 960:	86 95       	lsr	r24
 962:	71 05       	cpc	r23, r1
 964:	61 05       	cpc	r22, r1
 966:	08 94       	sec
 968:	08 95       	ret

0000096a <__fp_zero>:
 96a:	e8 94       	clt

0000096c <__fp_szero>:
 96c:	bb 27       	eor	r27, r27
 96e:	66 27       	eor	r22, r22
 970:	77 27       	eor	r23, r23
 972:	cb 01       	movw	r24, r22
 974:	97 f9       	bld	r25, 7
 976:	08 95       	ret

00000978 <__mulsf3>:
 978:	0b d0       	rcall	.+22     	; 0x990 <__mulsf3x>
 97a:	c4 cf       	rjmp	.-120    	; 0x904 <__fp_round>
 97c:	b5 df       	rcall	.-150    	; 0x8e8 <__fp_pscA>
 97e:	28 f0       	brcs	.+10     	; 0x98a <__mulsf3+0x12>
 980:	ba df       	rcall	.-140    	; 0x8f6 <__fp_pscB>
 982:	18 f0       	brcs	.+6      	; 0x98a <__mulsf3+0x12>
 984:	95 23       	and	r25, r21
 986:	09 f0       	breq	.+2      	; 0x98a <__mulsf3+0x12>
 988:	a6 cf       	rjmp	.-180    	; 0x8d6 <__fp_inf>
 98a:	ab cf       	rjmp	.-170    	; 0x8e2 <__fp_nan>
 98c:	11 24       	eor	r1, r1
 98e:	ee cf       	rjmp	.-36     	; 0x96c <__fp_szero>

00000990 <__mulsf3x>:
 990:	ca df       	rcall	.-108    	; 0x926 <__fp_split3>
 992:	a0 f3       	brcs	.-24     	; 0x97c <__mulsf3+0x4>

00000994 <__mulsf3_pse>:
 994:	95 9f       	mul	r25, r21
 996:	d1 f3       	breq	.-12     	; 0x98c <__mulsf3+0x14>
 998:	95 0f       	add	r25, r21
 99a:	50 e0       	ldi	r21, 0x00	; 0
 99c:	55 1f       	adc	r21, r21
 99e:	62 9f       	mul	r22, r18
 9a0:	f0 01       	movw	r30, r0
 9a2:	72 9f       	mul	r23, r18
 9a4:	bb 27       	eor	r27, r27
 9a6:	f0 0d       	add	r31, r0
 9a8:	b1 1d       	adc	r27, r1
 9aa:	63 9f       	mul	r22, r19
 9ac:	aa 27       	eor	r26, r26
 9ae:	f0 0d       	add	r31, r0
 9b0:	b1 1d       	adc	r27, r1
 9b2:	aa 1f       	adc	r26, r26
 9b4:	64 9f       	mul	r22, r20
 9b6:	66 27       	eor	r22, r22
 9b8:	b0 0d       	add	r27, r0
 9ba:	a1 1d       	adc	r26, r1
 9bc:	66 1f       	adc	r22, r22
 9be:	82 9f       	mul	r24, r18
 9c0:	22 27       	eor	r18, r18
 9c2:	b0 0d       	add	r27, r0
 9c4:	a1 1d       	adc	r26, r1
 9c6:	62 1f       	adc	r22, r18
 9c8:	73 9f       	mul	r23, r19
 9ca:	b0 0d       	add	r27, r0
 9cc:	a1 1d       	adc	r26, r1
 9ce:	62 1f       	adc	r22, r18
 9d0:	83 9f       	mul	r24, r19
 9d2:	a0 0d       	add	r26, r0
 9d4:	61 1d       	adc	r22, r1
 9d6:	22 1f       	adc	r18, r18
 9d8:	74 9f       	mul	r23, r20
 9da:	33 27       	eor	r19, r19
 9dc:	a0 0d       	add	r26, r0
 9de:	61 1d       	adc	r22, r1
 9e0:	23 1f       	adc	r18, r19
 9e2:	84 9f       	mul	r24, r20
 9e4:	60 0d       	add	r22, r0
 9e6:	21 1d       	adc	r18, r1
 9e8:	82 2f       	mov	r24, r18
 9ea:	76 2f       	mov	r23, r22
 9ec:	6a 2f       	mov	r22, r26
 9ee:	11 24       	eor	r1, r1
 9f0:	9f 57       	subi	r25, 0x7F	; 127
 9f2:	50 40       	sbci	r21, 0x00	; 0
 9f4:	8a f0       	brmi	.+34     	; 0xa18 <__mulsf3_pse+0x84>
 9f6:	e1 f0       	breq	.+56     	; 0xa30 <__mulsf3_pse+0x9c>
 9f8:	88 23       	and	r24, r24
 9fa:	4a f0       	brmi	.+18     	; 0xa0e <__mulsf3_pse+0x7a>
 9fc:	ee 0f       	add	r30, r30
 9fe:	ff 1f       	adc	r31, r31
 a00:	bb 1f       	adc	r27, r27
 a02:	66 1f       	adc	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	91 50       	subi	r25, 0x01	; 1
 a0a:	50 40       	sbci	r21, 0x00	; 0
 a0c:	a9 f7       	brne	.-22     	; 0x9f8 <__mulsf3_pse+0x64>
 a0e:	9e 3f       	cpi	r25, 0xFE	; 254
 a10:	51 05       	cpc	r21, r1
 a12:	70 f0       	brcs	.+28     	; 0xa30 <__mulsf3_pse+0x9c>
 a14:	60 cf       	rjmp	.-320    	; 0x8d6 <__fp_inf>
 a16:	aa cf       	rjmp	.-172    	; 0x96c <__fp_szero>
 a18:	5f 3f       	cpi	r21, 0xFF	; 255
 a1a:	ec f3       	brlt	.-6      	; 0xa16 <__mulsf3_pse+0x82>
 a1c:	98 3e       	cpi	r25, 0xE8	; 232
 a1e:	dc f3       	brlt	.-10     	; 0xa16 <__mulsf3_pse+0x82>
 a20:	86 95       	lsr	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	f7 95       	ror	r31
 a2a:	e7 95       	ror	r30
 a2c:	9f 5f       	subi	r25, 0xFF	; 255
 a2e:	c1 f7       	brne	.-16     	; 0xa20 <__mulsf3_pse+0x8c>
 a30:	fe 2b       	or	r31, r30
 a32:	88 0f       	add	r24, r24
 a34:	91 1d       	adc	r25, r1
 a36:	96 95       	lsr	r25
 a38:	87 95       	ror	r24
 a3a:	97 f9       	bld	r25, 7
 a3c:	08 95       	ret

00000a3e <_exit>:
 a3e:	f8 94       	cli

00000a40 <__stop_program>:
 a40:	ff cf       	rjmp	.-2      	; 0xa40 <__stop_program>
